# -*- coding: utf-8 -*-
""""Iris Flower Classification using Logistic Regression with PCA Visualization.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eSBTiDNc-pdgKx76B5roRxsBd3ZscbVx
"""

import pandas as pd
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import numpy as np

# 1. Load dataset
iris = load_iris()
X = iris.data  # 4 features
y = iris.target  # species

# 2. Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 3. Apply PCA (2 components)
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# 4. Train Logistic Regression on PCA-reduced data
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)

# 5. Evaluate
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))

# 6. Plot decision boundary
x_min, x_max = X_pca[:, 0].min() - 1, X_pca[:, 0].max() + 1
y_min, y_max = X_pca[:, 1].min() - 1, X_pca[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02),
                     np.arange(y_min, y_max, 0.02))
Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

from sklearn.datasets import load_iris
import pandas as pd

# Load the dataset
iris_data = load_iris(as_frame=True)
iris = pd.concat([iris_data.data, iris_data.target], axis=1)

# Add species names
iris['species'] = iris_data.target_names[iris['target']]

# Drop the target number if not needed
iris.drop(columns=['target'], inplace=True)

# Show the first 5 rows
print(iris.head())

# Dataset structure
print(iris.info())

import seaborn as sns
import matplotlib.pyplot as plt

# Pairplot with hue as species
sns.pairplot(iris, hue='species', corner=True)
plt.suptitle("Pairplot of Iris Dataset", y=1.02)
plt.show()

plt.figure(figsize=(8,6))
sns.scatterplot(data=iris, x='sepal length (cm)', y='petal length (cm)', hue='species')
plt.title("Sepal Length vs Petal Length by Species")
plt.show()

plt.figure(figsize=(8,6))
sns.histplot(data=iris, x='petal width (cm)', hue='species', kde=True)
plt.title("Distribution of Petal Width by Species")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Features (X) and Target (y)
X = iris.drop('species', axis=1)
y = iris['species']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# Accuracy
acc = accuracy_score(y_test, y_pred)
print("Accuracy:", acc)

# Confusion Matrix
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Classification Report
print("Classification Report:\n", classification_report(y_test, y_pred))

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Split data into features and target
X = iris.drop('species', axis=1)
y = iris['species']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Train the logistic regression model
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

# Predict on the test data
y_pred = model.predict(X_test)

# Evaluate the model
print("âœ… Accuracy:", accuracy_score(y_test, y_pred))
print("\nðŸ“Š Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nðŸ“‹ Classification Report:\n", classification_report(y_test, y_pred))